top_8_week_nights <- training_set %>%
group_by(no_of_week_nights) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
top_n(8)
top_6_weekend_nights <- training_set %>%
group_by(no_of_week_nights) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
top_n(6)
View(top_15_previous_not_cancelled)
top_15_previous_not_cancelled <- training_set %>%
group_by(no_of_previous_bookings_not_canceled) %>%
summarise(count = n()) %>%
arrange(desc(count))
View(top_15_previous_not_cancelled)
top_7_previous_not_cancelled <- training_set %>%
group_by(no_of_previous_bookings_not_canceled) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
select(no_of_previous_bookings_not_canceled)
View(top_7_previous_not_cancelled)
training_set$no_of_previous_bookings_not_canceled <- ifelse(
training_set$no_of_previous_bookings_not_canceled %in% top_7_previous_not_cancelled,
training_set$no_of_previous_bookings_not_canceled, "8+"
)
View(training_set)
top_8_previous_not_cancelled <- training_set %>%
group_by(no_of_previous_bookings_not_canceled) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
select(no_of_previous_bookings_not_canceled) %>%
top_n(8)
library(dplyr)
library(lubridate)
library(caret)
project_data <- read.csv("project_data/project_data.csv")
rownames(project_data) <- project_data$Booking_ID
project_data <- project_data[, -1]
training_ind <- createDataPartition(project_data$booking_status,
p = 0.75,
list = F,
times = 1)
training_set <- project_data[training_ind, ]
test_set <- project_data[-training_ind, ]
training_set$booking_status <- ifelse(training_set$booking_status=="canceled",1,0)
test_set$booking_status <- ifelse(test_set$booking_status=="canceled",1,0)
top_8_previous_not_cancelled <- training_set %>%
group_by(no_of_previous_bookings_not_canceled) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
select(no_of_previous_bookings_not_canceled) %>%
top_n(8)
View(top_8_previous_not_cancelled)
top_8_previous_not_cancelled <- training_set %>%
group_by(no_of_previous_bookings_not_canceled) %>%
summarise(count = n()) %>%
arrange(desc(count))
View(top_8_previous_not_cancelled)
?select()
top_8_previous_not_cancelled <- training_set %>%
group_by(no_of_previous_bookings_not_canceled) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
select(no_of_previous_bookings_not_canceled)
View(top_8_previous_not_cancelled)
?top_n()
top_8_previous_not_cancelled <- training_set %>%
group_by(no_of_previous_bookings_not_canceled) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
select(no_of_previous_bookings_not_canceled) %>%
slice(1:8)
View(top_8_previous_not_cancelled)
top_3_previous_cancellations <- training_set %>%
group_by(no_of_previous_cancellations) %>%
summarise(count = n()) %>%
arrange(desc(count))
View(top_3_previous_cancellations)
top_3_previous_cancellations <- training_set %>%
group_by(no_of_previous_cancellations) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:3)
View(training_set)
###### Training Set Categorical Features
top_8_previous_not_cancelled <- training_set %>%
group_by(no_of_previous_bookings_not_canceled) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
select(no_of_previous_bookings_not_canceled) %>%
slice(1:8)
top_2_number_of_children <- training_set %>%
group_by(no_of_children) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:2)
top_3_previous_cancellations <- training_set %>%
group_by(no_of_previous_cancellations) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:3)
top_8_week_nights <- training_set %>%
group_by(no_of_week_nights) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:8)
top_6_weekend_nights <- training_set %>%
group_by(no_of_week_nights) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:6)
training_set$no_of_previous_bookings_not_canceled <- ifelse(
training_set$no_of_previous_bookings_not_canceled %in% top_7_previous_not_cancelled,
training_set$no_of_previous_bookings_not_canceled, "8+"
)
top_8_previous_not_cancelled <- training_set %>%
group_by(no_of_previous_bookings_not_canceled) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
select(no_of_previous_bookings_not_canceled) %>%
slice(1:8)
top_2_number_of_children <- training_set %>%
group_by(no_of_children) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:2)
top_3_previous_cancellations <- training_set %>%
group_by(no_of_previous_cancellations) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:3)
top_8_week_nights <- training_set %>%
group_by(no_of_week_nights) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:8)
top_6_weekend_nights <- training_set %>%
group_by(no_of_week_nights) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:6)
training_set$no_of_previous_bookings_not_canceled <- ifelse(
training_set$no_of_previous_bookings_not_canceled %in% top_8_previous_not_cancelled,
training_set$no_of_previous_bookings_not_canceled, "8+"
)
training_set$no_of_children <- ifelse(
training_set$no_of_children %in% top_2_number_of_children,
training_set$no_of_children, "3+"
)
training_set$no_of_previous_cancellations <- ifelse(
training_set$no_of_previous_cancellations %in% top_3_previous_cancellations,
training_set$no_of_previous_cancellations, "3+"
)
training_set$no_of_week_nights <- ifelse(
training_set$no_of_week_nights %in% top_8_week_nights,
training_set$no_of_week_nights, "8+"
)
training_set$no_of_weekend_nights <- ifelse(
training_set$no_of_weekend_nights %in% top_6_weekend_nights,
training_set$no_of_weekend_nights, "6+"
)
training_set$type_of_meal_plan <- ifelse(training_set$type_of_meal_plan %in% c("meal_plan_1", "meal_plan_2"),
training_set$type_of_meal_plan,
"other")
training_set$arrival_date <- parse_date_time(training_set$arrival_date, "ymd")
training_set$booking_date <- int_start(interval(training_set$arrival_date - ddays(training_set$lead_time),
training_set$arrival_date))
season_months <- data.frame(winter = c(12,1,2), spring = c(3,4,5),
summer = c(6,7,8), fall = c(9,10,11))
get_season <- function(x) {
y <- month(x)
# print(y)
for (j in 1:length(colnames(season_months))) {
# print(j)
if (y %in% season_months[[j]]) {
# print(colnames(season_months)[j])
return(colnames(season_months)[j])
}
}
}
training_set$arrival_season <- sapply(training_set$arrival_date, get_season)
training_set$arrival_day <- wday(training_set$arrival_date)
training_set$arrival_day <- ifelse(training_set$arrival_day %in% c(1,6,7),
"weekend", "weekday")
categorical_var <- c(1:7,10:13,15,18,19)
for (i in categorical_var) {
training_set[[i]] <- factor(training_set[[i]])
}
cat_col <- colnames(training_set[, c(1:7,10:13,15,18,19)])
onehot_encoder <- dummyVars(~ no_of_adults + no_of_children + no_of_weekend_nights
+ no_of_week_nights + type_of_meal_plan + required_car_parking_space
+ room_type_reserved + market_segment_type + repeated_guest
+ no_of_previous_cancellations + no_of_previous_bookings_not_canceled
+ no_of_special_requests + arrival_season + arrival_day,
training_set[, c("no_of_adults","no_of_children","no_of_weekend_nights",
"no_of_week_nights","type_of_meal_plan",
"required_car_parking_space",
"room_type_reserved","market_segment_type",
"repeated_guest","no_of_previous_cancellations",
"no_of_previous_bookings_not_canceled",
"no_of_special_requests","arrival_season",
"arrival_day")],
levelsOnly = F,
fullRank = T)
onehot_enc_training <- predict(onehot_encoder, training_set[, c("no_of_adults","no_of_children","no_of_weekend_nights",
"no_of_week_nights","type_of_meal_plan",
"required_car_parking_space",
"room_type_reserved","market_segment_type",
"repeated_guest","no_of_previous_cancellations",
"no_of_previous_bookings_not_canceled",
"no_of_special_requests","arrival_season",
"arrival_day")])
View(test_set)
View(training_set)
View(top_2_number_of_children)
library(dplyr)
library(lubridate)
library(caret)
project_data <- read.csv("project_data/project_data.csv")
rownames(project_data) <- project_data$Booking_ID
project_data <- project_data[, -1]
training_ind <- createDataPartition(project_data$booking_status,
p = 0.75,
list = F,
times = 1)
training_set <- project_data[training_ind, ]
test_set <- project_data[-training_ind, ]
training_set$booking_status <- ifelse(training_set$booking_status=="canceled",1,0)
test_set$booking_status <- ifelse(test_set$booking_status=="canceled",1,0)
###### Training Set Categorical Features
top_8_previous_not_cancelled <- training_set %>%
group_by(no_of_previous_bookings_not_canceled) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
select(no_of_previous_bookings_not_canceled) %>%
slice(1:8)
top_2_number_of_children <- training_set %>%
group_by(no_of_children) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:2)
top_3_previous_cancellations <- training_set %>%
group_by(no_of_previous_cancellations) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:3)
top_8_week_nights <- training_set %>%
group_by(no_of_week_nights) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:8)
top_6_weekend_nights <- training_set %>%
group_by(no_of_weekend_nights) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
slice(1:6)
training_set$no_of_previous_bookings_not_canceled <- ifelse(
training_set$no_of_previous_bookings_not_canceled %in% top_8_previous_not_cancelled$no_of_previous_bookings_not_canceled,
training_set$no_of_previous_bookings_not_canceled, "8+"
)
training_set$no_of_children <- ifelse(
training_set$no_of_children %in% top_2_number_of_children$no_of_children,
training_set$no_of_children, "3+"
)
training_set$no_of_previous_cancellations <- ifelse(
training_set$no_of_previous_cancellations %in% top_3_previous_cancellations$no_of_previous_cancellations,
training_set$no_of_previous_cancellations, "3+"
)
training_set$no_of_week_nights <- ifelse(
training_set$no_of_week_nights %in% top_8_week_nights$no_of_week_nights,
training_set$no_of_week_nights, "8+"
)
training_set$no_of_weekend_nights <- ifelse(
training_set$no_of_weekend_nights %in% top_6_weekend_nights$no_of_weekend_nights,
training_set$no_of_weekend_nights, "6+"
)
training_set$type_of_meal_plan <- ifelse(training_set$type_of_meal_plan %in% c("meal_plan_1", "meal_plan_2"),
training_set$type_of_meal_plan,
"other")
training_set$arrival_date <- parse_date_time(training_set$arrival_date, "ymd")
training_set$booking_date <- int_start(interval(training_set$arrival_date - ddays(training_set$lead_time),
training_set$arrival_date))
season_months <- data.frame(winter = c(12,1,2), spring = c(3,4,5),
summer = c(6,7,8), fall = c(9,10,11))
get_season <- function(x) {
y <- month(x)
# print(y)
for (j in 1:length(colnames(season_months))) {
# print(j)
if (y %in% season_months[[j]]) {
# print(colnames(season_months)[j])
return(colnames(season_months)[j])
}
}
}
training_set$arrival_season <- sapply(training_set$arrival_date, get_season)
training_set$arrival_day <- wday(training_set$arrival_date)
training_set$arrival_day <- ifelse(training_set$arrival_day %in% c(1,6,7),
"weekend", "weekday")
categorical_var <- c(1:7,10:13,15,18,19)
for (i in categorical_var) {
training_set[[i]] <- factor(training_set[[i]])
}
cat_col <- colnames(training_set[, c(1:7,10:13,15,18,19)])
onehot_encoder <- dummyVars(~ no_of_adults + no_of_children + no_of_weekend_nights
+ no_of_week_nights + type_of_meal_plan + required_car_parking_space
+ room_type_reserved + market_segment_type + repeated_guest
+ no_of_previous_cancellations + no_of_previous_bookings_not_canceled
+ no_of_special_requests + arrival_season + arrival_day,
training_set[, c("no_of_adults","no_of_children","no_of_weekend_nights",
"no_of_week_nights","type_of_meal_plan",
"required_car_parking_space",
"room_type_reserved","market_segment_type",
"repeated_guest","no_of_previous_cancellations",
"no_of_previous_bookings_not_canceled",
"no_of_special_requests","arrival_season",
"arrival_day")],
levelsOnly = F,
fullRank = T)
onehot_enc_training <- predict(onehot_encoder, training_set[, c("no_of_adults","no_of_children","no_of_weekend_nights",
"no_of_week_nights","type_of_meal_plan",
"required_car_parking_space",
"room_type_reserved","market_segment_type",
"repeated_guest","no_of_previous_cancellations",
"no_of_previous_bookings_not_canceled",
"no_of_special_requests","arrival_season",
"arrival_day")])
training_set <- cbind(training_set, onehot_enc_training)
####### Test Set Categorical Variables
test_set$no_of_previous_bookings_not_canceled <- ifelse(
test_set$no_of_previous_bookings_not_canceled %in% top_8_previous_not_cancelled,
test_set$no_of_previous_bookings_not_canceled, "8+"
)
test_set$no_of_children <- ifelse(
test_set$no_of_children %in% top_2_number_of_children,
test_set$no_of_children, "3+"
)
test_set$no_of_previous_cancellations <- ifelse(
test_set$no_of_previous_cancellations %in% top_3_previous_cancellations,
test_set$no_of_previous_cancellations, "3+"
)
test_set$no_of_week_nights <- ifelse(
test_set$no_of_week_nights %in% top_8_week_nights,
test_set$no_of_week_nights, "8+"
)
test_set$no_of_weekend_nights <- ifelse(
test_set$no_of_weekend_nights %in% top_6_weekend_nights,
test_set$no_of_weekend_nights, "6+"
)
test_set$type_of_meal_plan <- ifelse(test_set$type_of_meal_plan %in% c("meal_plan_1", "meal_plan_2"),
test_set$type_of_meal_plan,
"other")
test_set$arrival_date <- parse_date_time(test_set$arrival_date, "ymd")
test_set$booking_date <- int_start(interval(test_set$arrival_date - ddays(test_set$lead_time),
test_set$arrival_date))
test_set$arrival_season <- sapply(test_set$arrival_date, get_season)
test_set$arrival_day <- wday(test_set$arrival_date)
test_set$arrival_day <- ifelse(test_set$arrival_day %in% c(1,6,7),
"weekend", "weekday")
categorical_var <- c(1:7,10:13,15,18,19)
for (i in categorical_var) {
test_set[[i]] <- factor(test_set[[i]])
}
cat_col <- colnames(test_set[, c(1:7,10:13,15,18,19)])
onehot_encoder <- dummyVars(~ no_of_adults + no_of_children + no_of_weekend_nights
+ no_of_week_nights + type_of_meal_plan + required_car_parking_space
+ room_type_reserved + market_segment_type + repeated_guest
+ no_of_previous_cancellations + no_of_previous_bookings_not_canceled
+ no_of_special_requests + arrival_season + arrival_day,
test_set[, c("no_of_adults","no_of_children","no_of_weekend_nights",
"no_of_week_nights","type_of_meal_plan",
"required_car_parking_space",
"room_type_reserved","market_segment_type",
"repeated_guest","no_of_previous_cancellations",
"no_of_previous_bookings_not_canceled",
"no_of_special_requests","arrival_season",
"arrival_day")],
levelsOnly = F,
fullRank = T)
onehot_enc_test <- predict(onehot_encoder, test_set[, c("no_of_adults","no_of_children","no_of_weekend_nights",
"no_of_week_nights","type_of_meal_plan",
"required_car_parking_space",
"room_type_reserved","market_segment_type",
"repeated_guest","no_of_previous_cancellations",
"no_of_previous_bookings_not_canceled",
"no_of_special_requests","arrival_season",
"arrival_day")])
test_set$no_of_previous_bookings_not_canceled <- ifelse(
test_set$no_of_previous_bookings_not_canceled %in% top_8_previous_not_cancelled$no_of_previous_bookings_not_canceled,
test_set$no_of_previous_bookings_not_canceled, "8+"
)
test_set$no_of_children <- ifelse(
test_set$no_of_children %in% top_2_number_of_children$no_of_children,
test_set$no_of_children, "3+"
)
test_set$no_of_previous_cancellations <- ifelse(
test_set$no_of_previous_cancellations %in% top_3_previous_cancellations$no_of_previous_cancellations,
test_set$no_of_previous_cancellations, "3+"
)
test_set$no_of_week_nights <- ifelse(
test_set$no_of_week_nights %in% top_8_week_nights$no_of_week_nights,
test_set$no_of_week_nights, "8+"
)
test_set$no_of_weekend_nights <- ifelse(
test_set$no_of_weekend_nights %in% top_6_weekend_nights$no_of_weekend_nights,
test_set$no_of_weekend_nights, "6+"
)
test_set$type_of_meal_plan <- ifelse(test_set$type_of_meal_plan %in% c("meal_plan_1", "meal_plan_2"),
test_set$type_of_meal_plan,
"other")
test_set$arrival_date <- parse_date_time(test_set$arrival_date, "ymd")
test_set$booking_date <- int_start(interval(test_set$arrival_date - ddays(test_set$lead_time),
test_set$arrival_date))
test_set$arrival_season <- sapply(test_set$arrival_date, get_season)
test_set$arrival_day <- wday(test_set$arrival_date)
test_set$arrival_day <- ifelse(test_set$arrival_day %in% c(1,6,7),
"weekend", "weekday")
categorical_var <- c(1:7,10:13,15,18,19)
for (i in categorical_var) {
test_set[[i]] <- factor(test_set[[i]])
}
cat_col <- colnames(test_set[, c(1:7,10:13,15,18,19)])
onehot_encoder <- dummyVars(~ no_of_adults + no_of_children + no_of_weekend_nights
+ no_of_week_nights + type_of_meal_plan + required_car_parking_space
+ room_type_reserved + market_segment_type + repeated_guest
+ no_of_previous_cancellations + no_of_previous_bookings_not_canceled
+ no_of_special_requests + arrival_season + arrival_day,
test_set[, c("no_of_adults","no_of_children","no_of_weekend_nights",
"no_of_week_nights","type_of_meal_plan",
"required_car_parking_space",
"room_type_reserved","market_segment_type",
"repeated_guest","no_of_previous_cancellations",
"no_of_previous_bookings_not_canceled",
"no_of_special_requests","arrival_season",
"arrival_day")],
levelsOnly = F,
fullRank = T)
onehot_enc_test <- predict(onehot_encoder, test_set[, c("no_of_adults","no_of_children","no_of_weekend_nights",
"no_of_week_nights","type_of_meal_plan",
"required_car_parking_space",
"room_type_reserved","market_segment_type",
"repeated_guest","no_of_previous_cancellations",
"no_of_previous_bookings_not_canceled",
"no_of_special_requests","arrival_season",
"arrival_day")])
View(test_set)
test_set <- project_data[-training_ind, ]
test_set$no_of_previous_bookings_not_canceled <- ifelse(
test_set$no_of_previous_bookings_not_canceled %in% top_8_previous_not_cancelled$no_of_previous_bookings_not_canceled,
test_set$no_of_previous_bookings_not_canceled, "8+"
)
test_set$no_of_children <- ifelse(
test_set$no_of_children %in% top_2_number_of_children$no_of_children,
test_set$no_of_children, "3+"
)
test_set$no_of_previous_cancellations <- ifelse(
test_set$no_of_previous_cancellations %in% top_3_previous_cancellations$no_of_previous_cancellations,
test_set$no_of_previous_cancellations, "3+"
)
test_set$no_of_week_nights <- ifelse(
test_set$no_of_week_nights %in% top_8_week_nights$no_of_week_nights,
test_set$no_of_week_nights, "8+"
)
test_set$no_of_weekend_nights <- ifelse(
test_set$no_of_weekend_nights %in% top_6_weekend_nights$no_of_weekend_nights,
test_set$no_of_weekend_nights, "6+"
)
test_set$type_of_meal_plan <- ifelse(test_set$type_of_meal_plan %in% c("meal_plan_1", "meal_plan_2"),
test_set$type_of_meal_plan,
"other")
test_set$arrival_date <- parse_date_time(test_set$arrival_date, "ymd")
test_set$booking_date <- int_start(interval(test_set$arrival_date - ddays(test_set$lead_time),
test_set$arrival_date))
test_set$arrival_season <- sapply(test_set$arrival_date, get_season)
test_set$arrival_day <- wday(test_set$arrival_date)
test_set$arrival_day <- ifelse(test_set$arrival_day %in% c(1,6,7),
"weekend", "weekday")
categorical_var <- c(1:7,10:13,15,18,19)
for (i in categorical_var) {
test_set[[i]] <- factor(test_set[[i]])
}
cat_col <- colnames(test_set[, c(1:7,10:13,15,18,19)])
onehot_encoder <- dummyVars(~ no_of_adults + no_of_children + no_of_weekend_nights
+ no_of_week_nights + type_of_meal_plan + required_car_parking_space
+ room_type_reserved + market_segment_type + repeated_guest
+ no_of_previous_cancellations + no_of_previous_bookings_not_canceled
+ no_of_special_requests + arrival_season + arrival_day,
test_set[, c("no_of_adults","no_of_children","no_of_weekend_nights",
"no_of_week_nights","type_of_meal_plan",
"required_car_parking_space",
"room_type_reserved","market_segment_type",
"repeated_guest","no_of_previous_cancellations",
"no_of_previous_bookings_not_canceled",
"no_of_special_requests","arrival_season",
"arrival_day")],
levelsOnly = F,
fullRank = T)
onehot_enc_test <- predict(onehot_encoder, test_set[, c("no_of_adults","no_of_children","no_of_weekend_nights",
"no_of_week_nights","type_of_meal_plan",
"required_car_parking_space",
"room_type_reserved","market_segment_type",
"repeated_guest","no_of_previous_cancellations",
"no_of_previous_bookings_not_canceled",
"no_of_special_requests","arrival_season",
"arrival_day")])
test_set <- cbind(test_set, onehot_enc_test)
##### Numerical Features
test_set[, c("lead_time", "avg_price_per_room")] <- scale(test_set[, c("lead_time", "avg_price_per_room")],
center = apply(training_set[, c("lead_time", "avg_price_per_room")], 2, mean),
scale = apply(training_set[, c("lead_time", "avg_price_per_room")], 2, sd))
training_set[, c("lead_time", "avg_price_per_room")] <- scale(training_set[, c("lead_time", "avg_price_per_room")])
