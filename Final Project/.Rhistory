library(keras)
library(MESS)
library(reticulate)
library(tensorflow)
library(keras)
library(AppliedPredictiveModeling)
data <- read.csv("lab_5_data/lab_5_data.csv")
training_ind <- createDataPartition(data$lodgepole_pine,
p = 0.75,
list = F,
times = 1)
training_set <- data[training_ind, ]
test_set <- data[-training_ind, ]
top_20_soil_types <- training_set %>%
group_by(soil_type) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
select(soil_type) %>%
top_n(20)
training_set$soil_type <- ifelse(training_set$soil_type %in% top_20_soil_types$soil_type,
training_set$soil_type,
"other")
training_set$wilderness_area <- factor(training_set$wilderness_area)
training_set$soil_type <- factor(training_set$soil_type)
onehot_encoder <- dummyVars(~ wilderness_area + soil_type,
training_set[, c("wilderness_area", "soil_type")],
levelsOnly = T,
fullRank = T)
onehot_enc_training <- predict(onehot_encoder,
training_set[, c("wilderness_area", "soil_type")])
training_set <- cbind(training_set, onehot_enc_training)
test_set$soil_type <- ifelse(test_set$soil_type %in% top_20_soil_types$soil_type,
test_set$soil_type,
"other")
test_set$wilderness_area <- factor(test_set$wilderness_area)
test_set$soil_type <- factor(test_set$soil_type)
onehot_enc_test <- predict(onehot_encoder, test_set[, c("wilderness_area", "soil_type")])
test_set <- cbind(test_set, onehot_enc_test)
test_set[, -c(11:13)] <- scale(test_set[, -c(11:13)],
center = apply(training_set[, -c(11:13)], 2, mean),
scale = apply(training_set[, -c(11:13)], 2, sd))
training_set[, -c(11:13)] <- scale(training_set[, -c(11:13)])
training_features <- array(data = unlist(training_set[, -c(11:13)]),
dim = c(nrow(training_set), 33))
training_labels <- array(data = unlist(training_set[, 13]),
dim = c(nrow(training_set)))
test_features <- array(data = unlist(training_set[, -c(11:13)]),
dim = c(nrow(test_set), 33))
test_labels <- array(data = unlist(training_set[, 13]),
dim = c(nrow(test_set)))
use_virtualenv("my_tf_workspace")
model <- keras_model_sequential(list(
layer_dense(units = 20, activation = "relu"),
layer_dense(units = 10, activation = "relu"),
layer_dense(units = 1, activation = "sigmoid")))
compile(model,
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
history <- fit(model, training_features, training_labels,
epochs = 40, batch_size = 512, validation_split = 0.33)
predictions <- predict(model, test_features)
test_set$p_prob <- predictions[, 1]
head(predictions, 10)
over_threshold <- test_set[test_set$p_prob >= 0.5, ]
# Percentage of incorrect predictions for observations of the negative class
fpr <- sum(over_threshold$lodgepole_pine==0)/sum(test_set$lodgepole_pine==0)
fpr
# Percentage of correct predictions for observations of the positive class
tpr <- sum(over_threshold$lodgepole_pine==1)/sum(test_set$lodgepole_pine==1)
tpr
# Data processing for ROC curve
roc_data <- data.frame(threshold=seq(1,0,-0.01), fpr=0, tpr=0)
for (i in roc_data$threshold) {
over_threshold <- test_set[test_set$p_prob >= i, ]
fpr <- sum(over_threshold$lodgepole_pine==0)/sum(test_set$lodgepole_pine==0)
roc_data[roc_data$threshold==i, "fpr"] <-  fpr
tpr <- sum(over_threshold$lodgepole_pine==1)/sum(test_set$lodgepole_pine==1)
roc_data[roc_data$threshold==i, "tpr"] <- tpr
}
# ROC curve
ggplot() +
geom_line(data = roc_data, aes(x=fpr, y=tpr, color = threshold), size = 2) +
scale_color_gradientn(colors = rainbow(3)) +
geom_abline(intercept = 0, slope = 1, lty = 2) +
geom_point(data = roc_data[seq(1, 101, 10), ], aes(x = fpr, y =tpr)) +
geom_text(data = roc_data[seq(1, 101, 10), ],
aes(x = fpr, y = tpr, label = threshold, hjust = 1.2, vjust = -0.2))
auc <- auc(x = roc_data$fpr, y = roc_data$tpr, type = "spline")
auc
calibration_data <- data.frame(bin_midpoint=seq(0.05, 0.95, 0.1),
observed_event_percentage=0)
for (i in seq(0.05,0.95,0.1)) {
in_interval <- test_set[test_set$p_prob >= (i-0.05) & test_set$p_prob <= (i+0.05), ]
oep <- nrow(in_interval[in_interval$lodgepole_pine==1, ])/nrow(in_interval)
calibration_data[calibration_data$bin_midpoint==i, "observed_event_percentage"] <- oep
}
# Calibration curve
ggplot(data = calibration_data, aes(x = bin_midpoint, y = observed_event_percentage)) +
geom_ine(size = 1) +
geom_abline(intercept = 0, slope = 1, lty = 2) +
geom_point(size = 2) +
geom_text(aes(label = bin_midpoint), hjust = 0.75, vjust = -0.5)
calibration_data <- data.frame(bin_midpoint=seq(0.05, 0.95, 0.1),
observed_event_percentage=0)
for (i in seq(0.05,0.95,0.1)) {
in_interval <- test_set[test_set$p_prob >= (i-0.05) & test_set$p_prob <= (i+0.05), ]
oep <- nrow(in_interval[in_interval$lodgepole_pine==1, ])/nrow(in_interval)
calibration_data[calibration_data$bin_midpoint==i, "observed_event_percentage"] <- oep
}
# Calibration curve
ggplot(data = calibration_data, aes(x = bin_midpoint, y = observed_event_percentage)) +
geom_line(size = 1) +
geom_abline(intercept = 0, slope = 1, lty = 2) +
geom_point(size = 2) +
geom_text(aes(label = bin_midpoint), hjust = 0.75, vjust = -0.5)
fpr_1 <- roc_data[roc_data$threshold==0.3, "fpr"]
fpr_1
tpr_1 <- roc_data[roc_data$threshold==0.3, "tpr"]
tpr_1
View(roc_data)
fpr_1 <- roc_data[roc_data$threshold==0.30, "fpr"]
fpr_1
tpr_1 <- roc_data[roc_data$threshold==0.30, "tpr"]
tpr_1
fpr_1 <- roc_data[71, "fpr"]
fpr_1
tpr_1 <- roc_data[roc_data$threshold==0.30, "tpr"]
tpr_1
fpr_1 <- roc_data[roc_data$threshold == 0.30, ]
fpr_1
tpr_1 <- roc_data[roc_data$threshold==0.30, "tpr"]
tpr_1
fpr_1 <- roc_data[roc_data$threshold > 0.30, ]
fpr_1
tpr_1 <- roc_data[roc_data$threshold==0.30, "tpr"]
tpr_1
fpr_1 <- roc_data[roc_data$threshold > 0.30, ]
fpr_1
class(roc_data$threshold)
tpr_1 <- roc_data[roc_data$threshold==0.30, "tpr"]
tpr_1
answer <- subset(roc_data, threshold == 0.30)
fpr_1 <- roc_data[roc_data$threshold==0.30, ]
tpr_1 <- roc_data[roc_data$threshold==0.30, "tpr"]
tpr_1
View(answer)
value <- roc_data[72, "threshold"]
value <- roc_data[72, "threshold"]
class(value)
?which
value <- roc_data[which(roc_data$threshold==0.30), "fpr"]
value
value <- roc_data[which(roc_data$threshold==0.30), "fpr"]
which(roc_data$threshold==0.30)
value <- roc_data[which(roc_data$threshold==0.30), "fpr"]
thr <- roc_data$threshold
thr <- roc_data$threshold
thr
roc_data$threshold[71]
x <- roc_data$threshold[71]
x <- roc_data$threshold[71]
roc_data[roc_data$threshold==x]
x <- roc_data$threshold[71]
roc_data[roc_data$threshold==x, ]
which(roc_data$threshold == as.numeric(0.3))
x <- roc_data$threshold[71]
roc_data[roc_data$threshold==x, ]
data("logisticCreditPredictions")
lcp <- logisticCreditPredictions
# ROC curve
roc_data <- data.frame(threshold=seq(1,0,-0.01), fpr=0, tpr=0)
for (i in roc_data$threshold) {
over_threshold <- lcp[lcp$Good >= i, ]
fpr <- sum(over_threshold$obs=="Bad")/sum(lcp$obs=="Bad")
roc_data[roc_data$threshold==i, "fpr"] <- fpr
tpr <- sum(over_threshold$obs=="Good")/sum(lcp$obs=="Good")
roc_data[roc_data$threshold==i, "tpr"] <- tpr
}
ggplot() +
geom_line(data = roc_data, aes(x = fpr, y = tpr, color = threshold), size = 2) +
scale_color_gradientn(colors = rainbow(3)) +
geom_abline(intercept = 0, slope = 1, lty = 2) +
geom_point(data = roc_data[seq(1, 101, 10), ], aes(x = fpr, y = tpr)) +
geom_text(data = roc_data[seq(1, 101, 10), ],
aes(x = fpr, y = tpr, label = threshold, hjust = 1.2, vjust = -0.2))
calibration_data <- data.frame(bin_midpoint=seq(0.05,0.95,0.1),
observed_event_percentage=0)
for (i in seq(0.05,0.95,0.1)) {
in_interval <- lcp[lcp$Good >= (i-0.05) & lcp$Good <= (i+0.05), ]
temp <- nrow(in_interval[in_interval$obs=="Good", ])/nrow(in_interval)
calibration_data[calibration_data$bin_midpoint==i, "observed_event_percentage"] <- temp
}
ggplot(data = calibration_data, aes(x = bin_midpoint, y = observed_event_percentage)) +
geom_line(size = 1) +
geom_abline(intercept = 0, slope = 1, lty = 2) +
geom_point(size = 2) +
geom_text(aes(label = bin_midpoint), hjust = 0.75, vjust = -0.5)
x <- roc_data$threshold[71]
x == 0.3
roc_data[roc_data$threshold==x, ]
x <- roc_data$threshold[71]
x == 0.30
roc_data[roc_data$threshold==x, ]
x <- roc_data$threshold[71]
identical(x, 0.30)
roc_data[roc_data$threshold==x, ]
setwd("C:/Users/janna/Documents/Merrimack MSDS/DSE6211/Final Project")
library(dplyr)
library(lubridate)
library(caret)
data <- read.csv("project_data/project_data.csv", na.strings = "?", stringsAsFactors = T)
data <- read.csv("project_data/project_data.csv", na.strings = "?", stringsAsFactors = T)
View(data)
data <- read.csv("project_data/project_data.csv")
View(data)
?read.csv
rownames(data) <- data$Booking_ID
data <- data[, -1]
data$arrival_date <- ydm(data$arrival_date)
data <- read.csv("project_data/project_data.csv")
rownames(data) <- data$Booking_ID
data <- data[, -1]
data$arrival_date_lub <- ydm(data$arrival_date)
data$arrival_date_lub <- parse_date_time(data$arrival_date)
data$arrival_date_lub <- parse_date_time(data$arrival_date, "ymd")
data <- read.csv("project_data/project_data.csv")
rownames(data) <- data$Booking_ID
data <- data[, -1]
data$arrival_date <- parse_date_time(data$arrival_date, "ymd")
data$booking_date <- int_start(interval(data$arrival_date - ddays(data$lead_time),
data$arrival_date))
?month()
date <- parse_date_time("2024-02-17", "ymd")
month(date)
season_months <- data.frame(winter <- c(12,1,2), spring <- c(3,4,5),
summer <- c(6,7,8), fall <- c(9,10,11))
View(season_months)
season_months <- data.frame(winter = c(12,1,2), spring = c(3,4,5),
summer = c(6,7,8), fall = c(9,10,11))
colnames(season_months)[2]
season_months[[2]]
get_season <- function(x) {
y <- month(x)
for (i in colnames(season_months)) {
if (y %in% season_months[[i]]) {
return(colnames(season_months)[i])
}
}
}
data$arrival_season <- get_season(data$arrival_date)
2 %in% season_months[[2]]
get_season <- function(x) {
y <- month(x)
for (i in y) {
for (j in colnames(season_months)) {
if (y %in% season_months[[j]]) {
return(colnames(season_months)[j])
}
}
}
}
data$arrival_season <- get_season(data$arrival_date)
date <- parse_date_time("2024-02-17", "ymd")
get_season(date)
class(month(date))
month(date) %in% season_months[[1]]
colnames(season_months)[i]
colnames(season_months)[1]
get_season <- function(x) {
y <- month(x)
for (j in colnames(season_months)) {
if (y %in% season_months$j) {
return(colnames(season_months)[j])
}
}
}
get_season(date)
result <- get_season(date)
month(date) %in% season_months[["winter"]]
get_season <- function(x) {
y <- month(x)
for (j in colnames(season_months)) {
if (y %in% season_months[[j]]) {
return(colnames(season_months)[j])
}
}
}
result <- get_season(date)
get_season <- function(x) {
y <- month(x)
print(y)
for (j in colnames(season_months)) {
if (y %in% season_months[[j]]) {
return(colnames(season_months)[j])
}
}
}
get_season <- function(x) {
y <- month(x)
print(y)
for (j in colnames(season_months)) {
print(j)
if (y %in% season_months[[j]]) {
return(colnames(season_months)[j])
}
}
}
result <- get_season(date)
get_season <- function(x) {
y <- month(x)
print(y)
for (j in colnames(season_months)) {
print(j)
if (y %in% season_months[[j]]) {
print(colnames(season_months)[j])
return(colnames(season_months)[j])
}
}
}
result <- get_season(date)
length(colnanes(season_months))
length(colnames(season_months))
get_season <- function(x) {
y <- month(x)
print(y)
for (j in length(colnames(season_months))) {
# print(j)
if (y %in% season_months[[j]]) {
# print(colnames(season_months)[j])
return(colnames(season_months)[j])
}
}
}
result <- get_season(date)
get_season <- function(x) {
y <- month(x)
print(y)
for (j in length(colnames(season_months))) {
print(j)
if (y %in% season_months[[j]]) {
print(colnames(season_months)[j])
return(colnames(season_months)[j])
}
}
}
result <- get_season(date)
result
month(date) %in% season_months[[1]]
print(colnames(season_months)[1])
get_season <- function(x) {
y <- month(x)
print(y)
for (j in 1:length(colnames(season_months))) {
print(j)
if (y %in% season_months[[j]]) {
print(colnames(season_months)[j])
return(colnames(season_months)[j])
}
}
}
result <- get_season(date)
data$arrival_season <- get_season(data$arrival_date)
get_season <- function(x) {
y <- month(x)
# print(y)
for (j in 1:length(colnames(season_months))) {
# print(j)
if (y %in% season_months[[j]]) {
# print(colnames(season_months)[j])
return(colnames(season_months)[j])
}
}
}
?apply
?sapply(list, function)
?sapply
data$arrival_season <- sapply(data$arrival_date, get_season)
data$arrival_day <- wday(data$arrival_date)
?wday
training_set$arrival_day %>%
wday() %>%
sapply(ifelse(training_set$arrival_day %in% c(1,6,7), "weekend", "weekday"))
library(dplyr)
library(lubridate)
library(caret)
project_data <- read.csv("project_data/project_data.csv")
rownames(data) <- data$Booking_ID
project_data <- read.csv("project_data/project_data.csv")
View(project_data)
rownames(data) <- data$Booking_ID
rownames(data) <- project_data$Booking_ID
library(dplyr)
library(lubridate)
library(caret)
project_data <- read.csv("project_data/project_data.csv")
rownames(project_data) <- project_data$Booking_ID
project_data <- project_data[, -1]
training_ind <- createDataPartition(project_data$booking_status,
p = 0.75,
list = F,
times = 1)
training_set <- project_data[training_ind, ]
test_set <- project_data[-training_ind, ]
training_set$arrival_date <- parse_date_time(training_set$arrival_date, "ymd")
training_set$booking_date <- int_start(interval(training_set$arrival_date - ddays(training_set$lead_time),
training_set$arrival_date))
season_months <- data.frame(winter = c(12,1,2), spring = c(3,4,5),
summer = c(6,7,8), fall = c(9,10,11))
date <- parse_date_time("2024-02-17", "ymd")
get_season <- function(x) {
y <- month(x)
# print(y)
for (j in 1:length(colnames(season_months))) {
# print(j)
if (y %in% season_months[[j]]) {
# print(colnames(season_months)[j])
return(colnames(season_months)[j])
}
}
}
training_set$arrival_season <- sapply(training_set$arrival_date, get_season)
training_set$arrival_day %>%
wday() %>%
sapply(ifelse(training_set$arrival_day %in% c(1,6,7), "weekend", "weekday"))
training_set$arrival_day <- wday(arrival_date)
training_set$arrival_day <- wday(training_set$arrival_date)
View(training_set)
training_set$arrival_day <- ifelse(training_set$arrival_day %in% c(1,6,7),
"weekend", "weekday")
View(training_set[, -c("lead_time", "average_price_per_room")])
print(c(1:7))
print(c(1:7, 11:16))
View(training_set[, c(1:7,10:13,15,18,19)])
categorical_var <- c(1:7,10:13,15,18,19)
for (i in categorical_var) {
training_set[[i]] <- factor(training_set[[i]])
}
unique(training_set$no_of_weekend_nights)
colnames(training_set[, c(1:7,10:13,15,18,19)])
onehot_encoder <- dummyVars(~ no_of_adults + no_of_children + no_of_weekend_nights
+ no_of_week_nights + type_of_meal_plan + required_car_parking_space
+ room_type_reserved + market_segment_type + repeated_guest
+ no_of_previous_cancellations + no_of_previous_bookings_not_cancelled
+ no_of_special_requests + arrival_season + arrival_day,
training_set[, c(1:7,10:13,15,18,19)],
levelsOnly = T,
fullRank = T)
cat_col <- colnames(training_set[, c(1:7,10:13,15,18,19)])
onehot_encoder <- dummyVars(~ no_of_adults + no_of_children + no_of_weekend_nights
+ no_of_week_nights + type_of_meal_plan + required_car_parking_space
+ room_type_reserved + market_segment_type + repeated_guest
+ no_of_previous_cancellations + no_of_previous_bookings_not_cancelled
+ no_of_special_requests + arrival_season + arrival_day,
training_set[, cat_col],
levelsOnly = T,
fullRank = T)
onehot_encoder <- dummyVars(~ no_of_adults + no_of_children + no_of_weekend_nights
+ no_of_week_nights + type_of_meal_plan + required_car_parking_space
+ room_type_reserved + market_segment_type + repeated_guest
+ no_of_previous_cancellations + no_of_previous_bookings_not_cancelled
+ no_of_special_requests + arrival_season + arrival_day,
training_set[, c("no_of_adults","no_of_children","no_of_weekend_nights",
"no_of_week_nights","type_of_meal_plan",
"required_car_parking_space",
"room_type_reserved","market_segment_type",
"repeated_guest","no_of_previous_cancellations",
"no_of_previous_bookings_not_canceled",
"no_of_special_requests","arrival_season",
"arrival_day")],
levelsOnly = T,
fullRank = T)
onehot_encoder <- dummyVars(~ no_of_adults + no_of_children + no_of_weekend_nights
+ no_of_week_nights + type_of_meal_plan + required_car_parking_space
+ room_type_reserved + market_segment_type + repeated_guest
+ no_of_previous_cancellations + no_of_previous_bookings_not_canceled
+ no_of_special_requests + arrival_season + arrival_day,
training_set[, c("no_of_adults","no_of_children","no_of_weekend_nights",
"no_of_week_nights","type_of_meal_plan",
"required_car_parking_space",
"room_type_reserved","market_segment_type",
"repeated_guest","no_of_previous_cancellations",
"no_of_previous_bookings_not_canceled",
"no_of_special_requests","arrival_season",
"arrival_day")],
levelsOnly = T,
fullRank = T)
?dummyVars
onehot_encoder <- dummyVars(~ no_of_adults + no_of_children + no_of_weekend_nights
+ no_of_week_nights + type_of_meal_plan + required_car_parking_space
+ room_type_reserved + market_segment_type + repeated_guest
+ no_of_previous_cancellations + no_of_previous_bookings_not_canceled
+ no_of_special_requests + arrival_season + arrival_day,
training_set[, c("no_of_adults","no_of_children","no_of_weekend_nights",
"no_of_week_nights","type_of_meal_plan",
"required_car_parking_space",
"room_type_reserved","market_segment_type",
"repeated_guest","no_of_previous_cancellations",
"no_of_previous_bookings_not_canceled",
"no_of_special_requests","arrival_season",
"arrival_day")],
levelsOnly = F,
fullRank = T)
onehot_enc_training <- predict(onehot_encoder, training_set[, c("no_of_adults","no_of_children","no_of_weekend_nights",
"no_of_week_nights","type_of_meal_plan",
"required_car_parking_space",
"room_type_reserved","market_segment_type",
"repeated_guest","no_of_previous_cancellations",
"no_of_previous_bookings_not_canceled",
"no_of_special_requests","arrival_season",
"arrival_day")])
training_set <- cbind(training_set, onehot_enc_training)
